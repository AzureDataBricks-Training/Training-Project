{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DataFactory-Sreeni"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Valid_Src_DS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_orders",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as string,",
						"          O_TIMSTMP as timestamp,",
						"          D_TIMSTMP as timestamp,",
						"          PRODUCT_NM as string,",
						"          PRICE as double,",
						"          STATUS as string,",
						"          CUST_ID as string,",
						"          CUST_EMAIL_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(CREATE_DT = currentDate('yyyy-MM-ss')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ORDER_ID as string,",
						"          O_TIMSTMP as timestamp,",
						"          D_TIMSTMP as timestamp,",
						"          PRODUCT_NM as string,",
						"          PRICE as double,",
						"          STATUS as string,",
						"          CUST_ID as string,",
						"          CUST_EMAIL_ID as string,",
						"          CREATE_DT as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Silver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Src_Sql_orders",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Rej_DS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Valid",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "assert1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "window1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as string,",
						"          O_TIMSTMP as string,",
						"          D_TIMSTMP as string,",
						"          PRODUCT_NM as string,",
						"          PRICE as string,",
						"          STATUS as string,",
						"          CUST_ID as string,",
						"          CUST_EMAIL_ID as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 assert(expectTrue(!isNull(ORDER_ID), false, 'order_id'),",
						"     expectTrue(!isNull(O_TIMSTMP), false, 'order_tm'),",
						"     expectTrue(!isNull(toDate(O_TIMSTMP, 'yyyy-MM-dd HH:mm:ss')), false, 'valid_tm_stm')) ~> assert1",
						"assert1 derive(Null_Order_Id = hasError('order_id'),",
						"          Null_Order_Tm = hasError('order_tm'),",
						"          invalid_Order_tm = hasError('valid_tm_stm')) ~> derivedColumn1",
						"derivedColumn1 window(over(ORDER_ID,",
						"          O_TIMSTMP),",
						"     asc(ORDER_ID, true),",
						"     asc(O_TIMSTMP, true),",
						"     row_num = rowNumber()) ~> window1",
						"window1 split(Null_Order_Id==false() && Null_Order_Tm==false() && invalid_Order_tm==false() && row_num==1,",
						"     disjoint: false) ~> split1@(valid, reject)",
						"split1@valid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Valid_Orders.csv'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ORDER_ID,",
						"          O_TIMSTMP,",
						"          D_TIMSTMP,",
						"          PRODUCT_NM,",
						"          PRICE,",
						"          STATUS,",
						"          CUST_ID,",
						"          CUST_EMAIL_ID",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@reject sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Reject_Orders.csv'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ORDER_ID,",
						"          O_TIMSTMP,",
						"          D_TIMSTMP,",
						"          PRODUCT_NM,",
						"          PRICE,",
						"          STATUS,",
						"          CUST_ID,",
						"          CUST_EMAIL_ID",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Gold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-26T03:18:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-26T03:18:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sql_To_tgt_ready_file",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-26T03:18:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Bronze",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Bronze",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Silver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Bronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-26T03:23:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/silver')]",
				"[concat(variables('factoryId'), '/pipelines/Load')]",
				"[concat(variables('factoryId'), '/pipelines/Gold')]"
			]
		}
	]
}